<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on Manistein&#39;s Blog</title>
    <link>https://manistein.github.io/blog/categories/network/</link>
    <description>Recent content in Network on Manistein&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© 2017 All rights reserved</copyright>
    <lastBuildDate>Mon, 07 Aug 2017 13:27:45 +0800</lastBuildDate>
    
	<atom:link href="https://manistein.github.io/blog/categories/network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>《TCP/IP详解》数据链路层总结</title>
      <link>https://manistein.github.io/blog/post/network/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 07 Aug 2017 13:27:45 +0800</pubDate>
      
      <guid>https://manistein.github.io/blog/post/network/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;数据链路层概述&#34;&gt;数据链路层概述&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;计算机网络的形成&lt;br /&gt;
计算机最初只是孤立的一个运算机器，随着业务需求的不断发展，单台孤立的计算机已经不能够满足我们的需求，因此人们把一个区域内的多台计算机连接成一个网络即局域网，然而这些小的网络并不能满足对计算机日益增长的需求，因此把不同的局域网连接成一个全球性质的网络，我们称之为互联网，互联网就是把不同的局域网通过路由器连接起来的网络。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《TCP/IP详解》运输层总结</title>
      <link>https://manistein.github.io/blog/post/network/%E8%BF%90%E8%BE%93%E5%B1%82%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 27 Mar 2017 00:30:00 +0800</pubDate>
      
      <guid>https://manistein.github.io/blog/post/network/%E8%BF%90%E8%BE%93%E5%B1%82%E6%80%BB%E7%BB%93/</guid>
      <description>运输层协议公有特征 应用进程之间的通信  两台主机之间的通信，实际上是两台主机上应用进程之间的通信 主机上所有使用网络功能的应用进程，共享操作系统内核提供的网络通信功能 因为操作系统上应用进程众多，因此为了将数据包准确交付给目标机器上的指定进程，因此需要通过端口号来区分不同的进程 IP+Port能够将数据包发送到指定机器上的指定进程 运输层位于内核通信服务的最高层，接收应用进程交付的数据包，同时将收到的数据包交付给应用进程 IP层负责将数据包交付给目标机器，而运输层则负责将数据包交付给指定应用进程，部分运输层协议（如TCP协议）实现可靠数据交付，流量控制，拥塞控制和连接状态控制等。
复用和分用 复用：所有使用网络功能的应用进程，共享操作系统内核提供的网络服务，它运行包括运输层在内的通信协议逻辑
 分用：内核收到数据包以后，将数据包上传应用进程，具体交付给哪个应用进程，通过端口号区分
端口号划分 系统端口号：0~1023
 登记端口号：1024~49151
 客户端使用端口号：49152~65535
  UDP协议 UDP特征  UDP被称为用户数据报协议，它是无连接的，可以直接下传给IP层在网络上传输 应用层交付的数据包，将不进行任何分片，加上UDP首部后直接交付IP层 UDP协议不实现可靠传输，因此UDP协议尽最大努力交付 UDP没有流量控制，没有拥塞控制，更没有连接状态控制
UDP首部   * 源端口：发送端应用进程端口（16位） * 目的端口：接收端应用进程端口（16位） * 长度：UDP数据包长度（包括首部和数据部分，单位是字节） * 检验和：用于检验数据包是否有效，需要加上14字节的伪首部 * 注意：当目的端口为无效端口时，接收端会向源端返回一个错误内容为“目的不可达”的ICMP数据包
关于UDP套接字 UDP服务端套接字只有一个，所有的客户端数据包都会发送到同一个socket上，UDP的socket由ip和port指定。
TCP协议 概述（TCP特征）  TCP是面向连接的，只有连接建立（确定双方数据包可达）才进行数据收发 只能在建立连接的两个端点间进行通信，不能广播和组播 全双工通信 面向字节流，TCP不关心应用层的数据结构，应用层的数据必须序列化为字节流后，才能交付TCP层，TCP层不记录应用进程下发数据的边界，需要应用层自行处理
 提供可靠交付，保证数据包可达，并且保证交付应用层时，数据包顺序是发送方的发送顺序排列的 流量控制 拥塞控制  TCP数据包首部 * 源端口：发送端应用进程端口 * 目的端口：接收方应用进程端口 * 序号：标记数据部分，第一个字节的序号，比如上一个TCP数据包的第一个字节序号为1，最后一个字节序号为200，那么当前数据包的序号为201 * 确认号：由接收方向发送方发送，是接收方期待的网络字节序号，这意味着该序号以前的数据包，接收方已经接受，甚至已经上传应用层 * 数据偏移：标记数据部分，距离报文起始处有多远，用于记录TCP首部大小，单位是4字节，因为它占4位，最大值是15，所以TCP首部最大字节数是60字节 * 保留部分：不使用 * 特殊标记： * URG：URG=1时，紧急指针字段有效，告诉主机，有紧急数据包，需要尽快发送。数据包将直接插入发送队列的最前面 * ACK：ACK=1时，确认号有效，否则无效。TCP规定，连接建立后，ACK必须为1 * PSH：发送方PSH=1，则立即创建一个TCP数据包并发送，接收方收到PSH=1的数据包，则直接向上层交付，而不是等到接收缓存满的时候再进行 * SYN：连接请求报文SYN=1，ACK=0；连接接收报文SYN=1，ACK=1 * FIN：表明TCP数据包交付完毕，并要求释放连接 * 窗口：接收方接收数据字节的窗口，窗口值告诉发送方，从报文段首部中的确认号算起，接收方目前允许对方（连续）发送的数据量，之所以要加限制，是因为接收方的接收缓存大小是有限制的。单位字节。（这里需要和MSS进行区分，MSS也是对方指定，但是MSS指定TCP最大分节，而窗口则表明发送端可以连续发送多少字节，而非一次） * 检验和：用于计算数据包是否有效 * 紧急指针：URG=1才生效，标记紧急数据的最后一个字节，在TCP报文中紧急数据是数据开始部分到紧急数据指针之间，随后就是普通数据 * 选项： * 窗口扩大选项（3字节）：最大值14，表明窗口号可以左移的位数 * 时间戳（10字节）：包括发送时间戳和接收时间戳</description>
    </item>
    
    <item>
      <title>《TCP/IP详解》网络层总结</title>
      <link>https://manistein.github.io/blog/post/network/ip%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AE%E5%B1%82%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 25 Mar 2017 14:40:00 +0800</pubDate>
      
      <guid>https://manistein.github.io/blog/post/network/ip%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AE%E5%B1%82%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;ip协议层概述&#34;&gt;IP协议层概述&lt;/h1&gt;

&lt;p&gt;通过数据包的目标IP地址，不断得找出通往该IP地址的路由器（下一跳路由器地址），并最终将数据包送到目标机器上的协议层。本质的功效是导航数据包去往目标机器。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>